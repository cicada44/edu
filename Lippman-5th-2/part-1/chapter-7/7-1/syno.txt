Класс, использующий инкапсуляцию и абстракцию - АТД.
Интерфейс - доступные операции.
Как только в классе определены собственные операции, можно инкапсулировать переменные-члены.
Интерфейс Sales_data:
    -функция-член isbn()
    -combine() - добавляет 1 член класса к другому
    -add() - суммирует
    -read() - считывает данные в обьект класса
    -print() - выводит значение обьекта

    7.1.2 Определение пересмотренного класса Sales_data
Функции, определённые в классе являются неявно встраиваемыми.
Функция-член может обращаться к тому обьекту, из которого была вызвана.
Указатель this инициализируется тем обьектом, из которого была вызвана функция.

std::string isbn() const { return this->bookNo; }

const в даннном случае - модификатор this.
Константные обьекты могут вызывать только константные функции-члены.
Определение функций-членов вне класса.

double Sales_data::avg_price() const {
    if (units_sold)
        return revenue/units_sold;
    else
        return 0;
}

Обьявлена в области видимости класса Sales_data.

    7.1.3 Определение функций, не являющихся членом класса, но связанных с ним
Обычно функция, не являющаяся членом класса, но связанная с ним, определяется в том же заголовке.

    7.1.4 Конструкторы
Если класс не определяет конструкторы явно, компилятор сам опередлить констуктор неявно.
Созданный компилятором конструктор - синтезируемый стандартный конструктор.
Если есть внутриклассовый конструктор, то компилятор не создаст новых.
Классы, члены которых не имеют встроенных типов не могут иметь синтезируемого стандартного констуктора.
Конструкторы для класса Sales_data
Sales_data() = default;
Sales_data(const std::string &s): bookNo(s) { }
Sales_data(const std::string &s, unsigned n, double p):
    bookNo(s), units_sold(n), revenue(p*n) { }
Sales_data(std::istream &);

Sales_data() = default; // должен делать то же, что и синтезируемая версия