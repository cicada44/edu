    3.4.1 Использование итераторов
auto b = v.begin();
auto e = v.end();
Итераторы равны, если обьект v пуст.
++iter // следующий и предыдущий элементы
--iter // следующий и предыдущий элементы

string s = "Some string!";
if (s.begin() != s.end())
{
    auto it = s.begin();
    *it = toupper(*it);
}
// Изменение регистра первой буквы строки при условии, что строка не пуста

Встроены в тип вектор и строки.

vector<int>::iterator it; // rw
string::iterator it2; // rw
vector<int>::const_iterator it3; // r
string::const_iterator it4; // r

Если вектор константен, то и функция v.begin() вернет константное значение.

string::iterator it;
(*it).empty(); // void check, *it.empty() - err

Синтаксис разыменования упрощается ->: it->empty()

    3.4.2 Арифметические действия с итераторами
Инкремент итератора перемещает его на 1 элемент.
Добавленное к итератору значение возвращает итератор, перенесённый на указанное количество ячеек.
Средний элемент:

auto mid = v.begin() + v.size() / 2;

if (it < mid) // обработка первой половины

Результат вычисления выражения с итераторами имеет тип difference_type