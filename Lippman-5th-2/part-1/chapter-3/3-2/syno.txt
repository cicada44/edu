#include <string>
using std::string;

    3.2.1 Определение и инициализация строк
string s1; // по умолчанию, пустая строка
string s2(s1); // s2 - копия s1
string s2 = s1; // эквивалент s2(s1)
string s3("value"); // копия литерала, нулевой символ не включен
string s3 = "value"; // эквивалент s3("value")
string s4(n, 'c'); // символы c в количестве n
string s5 = "hiya"; // инициализация копией
string s6("hiya"); // прямая инициализация
string s7(10, 'c'); // прямая инициализация
string s8 = string(10, 'c'); // косвенная форма инициализации копией

    3.2.2 Операции со строками
Операции класса string
os << s; // выводит строку s в поток os
is << s; // читает с пробелами s из is
getline(is, s); // читает строку из потока is в переменную s
s.empty(); // true, если строка пустая
s.size; // количество символов в строке s
s[n] // clearly
s1 + s2 // concat
s1 = s2 // copy
s1 == s2 // equal
<, <=, ... // сравнение
getline() - читает с символами
Можно избежать конфликта смешивания типов данных.
Не использовать int в тех случаях, когда используется size_type. (string::size_type)
==, !=  - аналогично strcmp() :)
Нельзя сложить строковые литерали.

    3.2.3 Работа с символами строки
<cctype>
isalpha() // проверка на букву
isdigit() // проверка на цифру
isalnum() // isalnum + isdigit
iscntrl() // проверка на управляющий символ
isgraph() // не пробел
islower() // нижний регистр
isprint() // печатаемый
ispunct() // знак пунктуации
isspace() // отступ
isupper() // верхний регистр
isxdigit() // 16СС
Серийный оператор for необходим для перебора всех символов строки (к примеру).

string str("Some string");
for (auto c : str)
    cout << c << auto;

Используя ссылки можно менять символы в строке.

string s("hello");
for (auto &c : s)
    c = toupper(c);
cout << s << endl;
// изменение регистра

Можно также изменять регистр первого символа строки при его наличии.

string s("hello");
if (!s.empty())
    s[0] = toupper(s[0]);
cout << s << endl; // Hello

Индексировние не контроллируется.